{"/home/travis/build/npmtest/node-npmtest-browserslist/test.js":"/* istanbul instrument in package npmtest_browserslist */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browserslist/lib.npmtest_browserslist.js":"/* istanbul instrument in package npmtest_browserslist */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_browserslist = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_browserslist = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-browserslist/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-browserslist && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_browserslist */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_browserslist\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_browserslist.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_browserslist.rollup.js'] =\n            local.assetsDict['/assets.npmtest_browserslist.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_browserslist.__dirname + '/lib.npmtest_browserslist.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browserslist/node_modules/browserslist/index.js":"var path = require('path');\nvar e2c  = require('electron-to-chromium/versions');\nvar fs   = require('fs');\n\nvar caniuse = require('caniuse-lite').agents;\nvar region  = require('caniuse-lite').region;\n\nfunction normalize(versions) {\n    return versions.filter(function (version) {\n        return typeof version === 'string';\n    });\n}\n\nvar FLOAT_RANGE = /^\\d+(\\.\\d+)?(-\\d+(\\.\\d+)?)*$/;\nvar IS_SECTION = /^\\s*\\[(.+)\\]\\s*$/;\n\nfunction uniq(array) {\n    var filtered = [];\n    for ( var i = 0; i < array.length; i++ ) {\n        if ( filtered.indexOf(array[i]) === -1 ) filtered.push(array[i]);\n    }\n    return filtered;\n}\n\nfunction BrowserslistError(message) {\n    this.name = 'BrowserslistError';\n    this.message = message || '';\n    this.browserslist = true;\n    if ( Error.captureStackTrace ) {\n        Error.captureStackTrace(this, BrowserslistError);\n    }\n}\nBrowserslistError.prototype = Error.prototype;\n\n// Helpers\n\nfunction error(name) {\n    throw new BrowserslistError(name);\n}\n\nfunction fillUsage(result, name, data) {\n    for ( var i in data ) {\n        result[name + ' ' + i] = data[i];\n    }\n}\n\nvar cacheEnabled = !(\n    process && process.env && process.env.BROWSERSLIST_DISABLE_CACHE\n);\nvar filenessCache = {};\nvar configCache = {};\n\nfunction isFile(file) {\n    if ( file in filenessCache ) {\n        return filenessCache[file];\n    }\n    var result = fs.existsSync(file) && fs.statSync(file).isFile();\n    if ( cacheEnabled ) {\n        filenessCache[file] = result;\n    }\n    return result;\n}\n\nfunction eachParent(file, callback) {\n    var loc = path.resolve(file);\n    do {\n        var result = callback(loc);\n        if ( typeof result !== 'undefined' ) return result;\n    } while (loc !== (loc = path.dirname(loc)));\n    return undefined;\n}\n\nfunction getStat(opts) {\n    if ( opts.stats ) {\n        return opts.stats;\n    } else if ( process.env.BROWSERSLIST_STATS ) {\n        return process.env.BROWSERSLIST_STATS;\n    } else if ( opts.path ) {\n        return eachParent(opts.path, function (dir) {\n            var file = path.join(dir, 'browserslist-stats.json');\n            if ( isFile(file) ) {\n                return file;\n            }\n        });\n    }\n}\n\nfunction parsePackage(file) {\n    var config = JSON.parse(fs.readFileSync(file)).browserslist;\n    if ( typeof config === 'object' && config.length ) {\n        config = { defaults: config };\n    }\n    return config;\n}\n\nfunction pickEnv(config, opts) {\n    if ( typeof config !== 'object' ) return config;\n\n    var env;\n    if ( typeof opts.env === 'string' ) {\n        env = opts.env;\n    } else if ( typeof process.env.BROWSERSLIST_ENV === 'string' ) {\n        env = process.env.BROWSERSLIST_ENV;\n    } else if ( typeof process.env.NODE_ENV === 'string' ) {\n        env = process.env.NODE_ENV;\n    } else {\n        env = 'development';\n    }\n\n    return config[env] || config.defaults;\n}\n\nfunction generateFilter(sign, version) {\n    version = parseFloat(version);\n    if ( sign === '>' ) {\n        return function (v) {\n            return parseFloat(v) > version;\n        };\n    } else if ( sign === '>=' ) {\n        return function (v) {\n            return parseFloat(v) >= version;\n        };\n    } else if ( sign === '<' ) {\n        return function (v) {\n            return parseFloat(v) < version;\n        };\n    } else if ( sign === '<=' ) {\n        return function (v) {\n            return parseFloat(v) <= version;\n        };\n    }\n}\n\nfunction compareStrings(a, b) {\n    if ( a < b ) return -1;\n    if ( a > b ) return +1;\n    return 0;\n}\n\n/**\n * Return array of browsers by selection queries.\n *\n * @param {string[]} queries Browser queries.\n * @param {object} opts Options.\n * @param {string} [opts.path=\".\"] Path to processed file.\n *                                 It will be used to find config files.\n * @param {string} [opts.env=\"development\"] Processing environment.\n *                                          It will be used to take right\n *                                          queries from config file.\n * @param {string} [opts.config] Path to config file with queries.\n * @param {object} [opts.stats] Custom browser usage statistics\n *                              for \"> 1% in my stats\" query.\n * @return {string[]} Array with browser names in Can I Use.\n *\n * @example\n * browserslist('IE >= 10, IE 8') //=> ['ie 11', 'ie 10', 'ie 8']\n */\nvar browserslist = function (queries, opts) {\n    if ( typeof opts === 'undefined' ) opts = { };\n\n    if ( !opts.hasOwnProperty('path') ) {\n        opts.path = path.resolve('.');\n    }\n\n    if ( typeof queries === 'undefined' || queries === null ) {\n        if ( process.env.BROWSERSLIST ) {\n            queries = process.env.BROWSERSLIST;\n        } else if ( opts.config || process.env.BROWSERSLIST_CONFIG ) {\n            var file = opts.config || process.env.BROWSERSLIST_CONFIG;\n            queries = pickEnv(browserslist.readConfig(file), opts);\n        } else if ( opts.path ) {\n            queries = pickEnv(browserslist.findConfig(opts.path), opts);\n        }\n    }\n\n    if ( typeof queries === 'undefined' || queries === null ) {\n        queries = browserslist.defaults;\n    }\n\n    if ( typeof queries === 'string' ) {\n        queries = queries.split(/,\\s*/);\n    }\n\n    var context = { };\n\n    var stats = getStat(opts);\n    if ( stats ) {\n        if ( typeof stats === 'string' ) {\n            try {\n                stats = JSON.parse(fs.readFileSync(stats));\n            } catch (e) {\n                error('Can\\'t read ' + stats);\n            }\n        }\n        if ( 'dataByBrowser' in stats ) {\n            stats = stats.dataByBrowser;\n        }\n\n        context.customUsage = { };\n        for ( var browser in stats ) {\n            fillUsage(context.customUsage, browser, stats[browser]);\n        }\n    }\n\n    var result = [];\n\n    queries.forEach(function (selection) {\n        if ( selection.trim() === '' ) return;\n\n        var exclude = selection.indexOf('not ') === 0;\n        if ( exclude ) selection = selection.slice(4);\n\n        for ( var i in browserslist.queries ) {\n            var type  = browserslist.queries[i];\n            var match = selection.match(type.regexp);\n            if ( match ) {\n                var args = [context].concat(match.slice(1));\n                var array = type.select.apply(browserslist, args);\n                if ( exclude ) {\n                    array = array.concat(array.map(function (j) {\n                        return j.replace(/\\s\\d+/, ' 0');\n                    }));\n                    result = result.filter(function (j) {\n                        return array.indexOf(j) === -1;\n                    });\n                } else {\n                    result = result.concat(array);\n                }\n                return;\n            }\n        }\n\n        error('Unknown browser query `' + selection + '`');\n    });\n    result = result.map(function (i) {\n        var parts = i.split(' ');\n        var name = parts[0];\n        var version = parts[1];\n        if ( version === '0' ) {\n            return name + ' ' + browserslist.byName(name).versions[0];\n        } else {\n            return i;\n        }\n    }).sort(function (name1, name2) {\n        name1 = name1.split(' ');\n        name2 = name2.split(' ');\n        if ( name1[0] === name2[0] ) {\n            if ( FLOAT_RANGE.test(name1[1]) && FLOAT_RANGE.test(name2[1]) ) {\n                return parseFloat(name2[1]) - parseFloat(name1[1]);\n            } else {\n                return compareStrings(name2[1], name1[1]);\n            }\n        } else {\n            return compareStrings(name1[0], name2[0]);\n        }\n    });\n\n    return uniq(result);\n};\n\nvar normalizeVersion = function (data, version) {\n    if ( data.versions.indexOf(version) !== -1 ) {\n        return version;\n    } else if ( browserslist.versionAliases[data.name][version] ) {\n        return browserslist.versionAliases[data.name][version];\n    } else if ( data.versions.length === 1 ) {\n        return data.versions[0];\n    }\n};\n\nvar loadCountryStatistics = function (country) {\n    if ( !browserslist.usage[country] ) {\n        var usage = { };\n        var data = region(\n            require('caniuse-lite/data/regions/' + country + '.js'));\n        for ( var i in data ) {\n            fillUsage(usage, i, data[i]);\n        }\n        browserslist.usage[country] = usage;\n    }\n};\n\n// Will be filled by Can I Use data below\nbrowserslist.data  = { };\nbrowserslist.usage = {\n    global: { },\n    custom: null\n};\n\n// Default browsers query\nbrowserslist.defaults = [\n    '> 1%',\n    'last 2 versions',\n    'Firefox ESR'\n];\n\n// Browser names aliases\nbrowserslist.aliases = {\n    fx:             'firefox',\n    ff:             'firefox',\n    ios:            'ios_saf',\n    explorer:       'ie',\n    blackberry:     'bb',\n    explorermobile: 'ie_mob',\n    operamini:      'op_mini',\n    operamobile:    'op_mob',\n    chromeandroid:  'and_chr',\n    firefoxandroid: 'and_ff',\n    ucandroid:      'and_uc',\n    qqandroid:      'and_qq'\n};\n\n// Aliases to work with joined versions like `ios_saf 7.0-7.1`\nbrowserslist.versionAliases = { };\n\n// Get browser data by alias or case insensitive name\nbrowserslist.byName = function (name) {\n    name = name.toLowerCase();\n    name = browserslist.aliases[name] || name;\n    return browserslist.data[name];\n};\n\n// Get browser data by alias or case insensitive name and throw error\n// on unknown browser\nbrowserslist.checkName = function (name) {\n    var data = browserslist.byName(name);\n    if ( !data ) error('Unknown browser ' + name);\n    return data;\n};\n\n// Read and parse config\nbrowserslist.readConfig = function (file) {\n    if ( !isFile(file) ) {\n        error('Can\\'t read ' + file + ' config');\n    }\n    return browserslist.parseConfig(fs.readFileSync(file));\n};\n\n// Find config, read file and parse it\nbrowserslist.findConfig = function (from) {\n    from = path.resolve(from);\n\n    var cacheKey = isFile(from) ? path.dirname(from) : from;\n    if ( cacheKey in configCache ) {\n        return configCache[cacheKey];\n    }\n\n    var resolved = eachParent(from, function (dir) {\n        var config = path.join(dir, 'browserslist');\n        var pkg = path.join(dir, 'package.json');\n        var rc = path.join(dir, '.browserslistrc');\n\n        var pkgBrowserslist;\n        if ( isFile(pkg) ) {\n            try {\n                pkgBrowserslist = parsePackage(pkg);\n            } catch (e) {\n                console.warn(\n                    '[Browserslist] Could not parse ' + pkg + '. ' +\n                    'Ignoring it.');\n            }\n        }\n\n        if ( isFile(config) && pkgBrowserslist ) {\n            error(\n                dir + ' contains both browserslist ' +\n                'and package.json with browsers');\n        } else if ( isFile(rc) && pkgBrowserslist ) {\n            error(\n                dir + ' contains both .browserslistrc ' +\n                'and package.json with browsers');\n        } else if ( isFile(config) && isFile(rc) ) {\n            error(dir + ' contains both .browserslistrc and browserslist');\n        } else if ( isFile(config) ) {\n            return browserslist.readConfig(config);\n        } else if ( isFile(rc) ) {\n            return browserslist.readConfig(rc);\n        } else if ( pkgBrowserslist ) {\n            return pkgBrowserslist;\n        }\n    });\n    if ( cacheEnabled ) {\n        configCache[cacheKey] = resolved;\n    }\n    return resolved;\n};\n\n/**\n * Return browsers market coverage.\n *\n * @param {string[]} browsers Browsers names in Can I Use.\n * @param {string} [country=\"global\"] Which country statistics should be used.\n *\n * @return {number} Total market coverage for all selected browsers.\n *\n * @example\n * browserslist.coverage(browserslist('> 1% in US'), 'US') //=> 83.1\n */\nbrowserslist.coverage = function (browsers, country) {\n    if ( country && country !== 'global' ) {\n        country = country.toUpperCase();\n        loadCountryStatistics(country);\n    } else {\n        country = 'global';\n    }\n\n    return browsers.reduce(function (all, i) {\n        var usage = browserslist.usage[country][i];\n        if ( usage === undefined ) {\n            usage = browserslist.usage[country][i.replace(/ [\\d.]+$/, ' 0')];\n        }\n        return all + (usage || 0);\n    }, 0);\n};\n\n// Return array of queries from config content\nbrowserslist.parseConfig = function (string) {\n    var result = { defaults: [] };\n    var section = 'defaults';\n\n    string.toString()\n        .replace(/#[^\\n]*/g, '')\n        .split(/\\n/)\n        .map(function (line) {\n            return line.trim();\n        })\n        .filter(function (line) {\n            return line !== '';\n        })\n        .forEach(function (line) {\n            if ( IS_SECTION.test(line) ) {\n                section = line.match(IS_SECTION)[1].trim();\n                result[section] = result[section] || [];\n            } else {\n                result[section].push(line);\n            }\n        });\n\n    return result;\n};\n\n// Clear internal caches\nbrowserslist.clearCaches = function () {\n    filenessCache = {};\n    configCache = {};\n};\n\nbrowserslist.queries = {\n\n    lastVersions: {\n        regexp: /^last\\s+(\\d+)\\s+versions?$/i,\n        select: function (context, versions) {\n            var selected = [];\n            Object.keys(caniuse).forEach(function (name) {\n                var data  = browserslist.byName(name);\n                if ( !data ) return;\n                var array = data.released.slice(-versions);\n\n                array = array.map(function (v) {\n                    return data.name + ' ' + v;\n                });\n                selected = selected.concat(array);\n            });\n            return selected;\n        }\n    },\n\n    lastByBrowser: {\n        regexp: /^last\\s+(\\d+)\\s+(\\w+)\\s+versions?$/i,\n        select: function (context, versions, name) {\n            var data = browserslist.checkName(name);\n            return data.released.slice(-versions).map(function (v) {\n                return data.name + ' ' + v;\n            });\n        }\n    },\n\n    globalStatistics: {\n        regexp: /^(>=?)\\s*(\\d*\\.?\\d+)%$/,\n        select: function (context, sign, popularity) {\n            popularity = parseFloat(popularity);\n            var result = [];\n\n            for ( var version in browserslist.usage.global ) {\n                if ( sign === '>' ) {\n                    if ( browserslist.usage.global[version] > popularity ) {\n                        result.push(version);\n                    }\n                } else if ( browserslist.usage.global[version] >= popularity ) {\n                    result.push(version);\n                }\n            }\n\n            return result;\n        }\n    },\n\n    customStatistics: {\n        regexp: /^(>=?)\\s*(\\d*\\.?\\d+)%\\s+in\\s+my\\s+stats$/,\n        select: function (context, sign, popularity) {\n            popularity = parseFloat(popularity);\n            var result = [];\n\n            if ( !context.customUsage ) {\n                error('Custom usage statistics was not provided');\n            }\n\n            for ( var version in context.customUsage ) {\n                if ( sign === '>' ) {\n                    if ( context.customUsage[version] > popularity ) {\n                        result.push(version);\n                    }\n                } else if ( context.customUsage[version] >= popularity ) {\n                    result.push(version);\n                }\n            }\n\n            return result;\n        }\n    },\n\n    countryStatistics: {\n        regexp: /^(>=?)\\s*(\\d*\\.?\\d+)%\\s+in\\s+(\\w\\w)$/,\n        select: function (context, sign, popularity, country) {\n            popularity = parseFloat(popularity);\n            country    = country.toUpperCase();\n            var result = [];\n\n            loadCountryStatistics(country);\n            var usage = browserslist.usage[country];\n\n            for ( var version in usage ) {\n                if ( sign === '>' ) {\n                    if ( usage[version] > popularity ) {\n                        result.push(version);\n                    }\n                } else if ( usage[version] >= popularity ) {\n                    result.push(version);\n                }\n            }\n\n            return result;\n        }\n    },\n\n    electronRange: {\n        regexp: /^electron\\s+([\\d\\.]+)\\s*-\\s*([\\d\\.]+)$/i,\n        select: function (context, from, to) {\n            if ( !e2c[from] ) error('Unknown version ' + from + ' of electron');\n            if ( !e2c[to] ) error('Unknown version ' + to   + ' of electron');\n\n            from = parseFloat(from);\n            to = parseFloat(to);\n\n            return Object.keys(e2c).filter(function (i) {\n                var parsed = parseFloat(i);\n                return parsed >= from && parsed <= to;\n            }).map(function (i) {\n                return 'chrome ' + e2c[i];\n            });\n        }\n    },\n\n    range: {\n        regexp: /^(\\w+)\\s+([\\d\\.]+)\\s*-\\s*([\\d\\.]+)$/i,\n        select: function (context, name, from, to) {\n            var data = browserslist.checkName(name);\n            from = parseFloat(normalizeVersion(data, from) || from);\n            to = parseFloat(normalizeVersion(data, to) || to);\n\n            var filter = function (v) {\n                var parsed = parseFloat(v);\n                return parsed >= from && parsed <= to;\n            };\n\n            return data.released.filter(filter).map(function (v) {\n                return data.name + ' ' + v;\n            });\n        }\n    },\n\n    electronVersions: {\n        regexp: /^electron\\s*(>=?|<=?)\\s*([\\d\\.]+)$/i,\n        select: function (context, sign, version) {\n            return Object.keys(e2c)\n                .filter(generateFilter(sign, version))\n                .map(function (i) {\n                    return 'chrome ' + e2c[i];\n                });\n        }\n    },\n\n    versions: {\n        regexp: /^(\\w+)\\s*(>=?|<=?)\\s*([\\d\\.]+)$/,\n        select: function (context, name, sign, version) {\n            var data = browserslist.checkName(name);\n            var alias = normalizeVersion(data, version);\n            if ( alias ) {\n                version = alias;\n            }\n            return data.released\n                .filter(generateFilter(sign, version))\n                .map(function (v) {\n                    return data.name + ' ' + v;\n                });\n        }\n    },\n\n    esr: {\n        regexp: /^(firefox|ff|fx)\\s+esr$/i,\n        select: function () {\n            return ['firefox 52'];\n        }\n    },\n\n    opMini: {\n        regexp: /(operamini|op_mini)\\s+all/i,\n        select: function () {\n            return ['op_mini all'];\n        }\n    },\n\n    electron: {\n        regexp: /^electron\\s+([\\d\\.]+)$/i,\n        select: function (context, version) {\n            var chrome = e2c[version];\n            if ( !chrome ) error('Unknown version ' + version + ' of electron');\n            return ['chrome ' + chrome];\n        }\n    },\n\n    direct: {\n        regexp: /^(\\w+)\\s+(tp|[\\d\\.]+)$/i,\n        select: function (context, name, version) {\n            if ( /tp/i.test(version) ) version = 'TP';\n            var data  = browserslist.checkName(name);\n            var alias = normalizeVersion(data, version);\n            if ( alias ) {\n                version = alias;\n            } else {\n                if ( version.indexOf('.') === -1 ) {\n                    alias = version + '.0';\n                } else if ( /\\.0$/.test(version) ) {\n                    alias = version.replace(/\\.0$/, '');\n                }\n                alias = normalizeVersion(data, alias);\n                if ( alias ) {\n                    version = alias;\n                } else {\n                    error('Unknown version ' + version + ' of ' + name);\n                }\n            }\n            return [data.name + ' ' + version];\n        }\n    },\n\n    defaults: {\n        regexp: /^defaults$/i,\n        select: function () {\n            return browserslist(browserslist.defaults);\n        }\n    }\n\n};\n\n// Get and convert Can I Use data\n\n(function () {\n    for ( var name in caniuse ) {\n        var browser = caniuse[name];\n        browserslist.data[name] = {\n            name:     name,\n            versions: normalize(caniuse[name].versions),\n            released: normalize(caniuse[name].versions.slice(0, -3))\n        };\n        fillUsage(browserslist.usage.global, name, browser.usage_global);\n\n        browserslist.versionAliases[name] = { };\n        for ( var i = 0; i < browser.versions.length; i++ ) {\n            var full = browser.versions[i];\n            if (!full) continue;\n\n            if ( full.indexOf('-') !== -1 ) {\n                var interval = full.split('-');\n                for ( var j = 0; j < interval.length; j++ ) {\n                    browserslist.versionAliases[name][interval[j]] = full;\n                }\n            }\n        }\n    }\n}());\n\nmodule.exports = browserslist;\n","/home/travis/build/npmtest/node-npmtest-browserslist/node_modules/browserslist/cli.js":"#!/usr/bin/env node\n\nvar browserslist = require('./');\nvar pkg          = require('./package.json');\nvar args         = process.argv.slice(2);\n\nfunction isArg(arg) {\n    return args.some(function (str) {\n        return str === arg || str.indexOf(arg + '=') === 0;\n    });\n}\n\nfunction getArgValue(arg) {\n    var found = args.filter(function (str) {\n        return str.indexOf(arg + '=') === 0;\n    })[0];\n    var value = found && found.split('=')[1];\n    return value && value.replace(/^['\"]|['\"]$/g, '');\n}\n\nfunction error(msg) {\n    process.stderr.write(pkg.name + ': ' + msg + '\\n');\n    process.exit(1);\n}\n\nfunction query(queries, opts) {\n    try {\n        return browserslist(queries, opts);\n    } catch (e) {\n        if ( e.name === 'BrowserslistError' ) {\n            return error(e.message);\n        } else {\n            throw e;\n        }\n    }\n}\n\nif ( args.length === 0 || isArg('--help') || isArg('-h') ) {\n    process.stdout.write([\n        pkg.description,\n        '',\n        'Usage:',\n        '  ' + pkg.name + ' \"QUERIES\"',\n        '  ' + pkg.name + ' --coverage \"QUERIES\"',\n        '  ' + pkg.name + ' --coverage=US \"QUERIES\"',\n        '  ' + pkg.name + ' --config=browserslist \"path/to/browserlist/file\"',\n        '  ' + pkg.name + ' --env=\"environment name defined in config\"',\n        '  ' + pkg.name + ' --stats=\"path/to/browserlist/stats/file\"'\n    ].join('\\n') + '\\n');\n\n} else if ( isArg('--version') || isArg('-v') ) {\n    process.stdout.write(pkg.name + ' ' + pkg.version + '\\n');\n\n} else if ( isArg('--coverage') || isArg('-c') ) {\n    var browsers = args.find(function (i) {\n        return i[0] !== '-';\n    });\n    if ( !browsers ) error('Define a browsers query to get coverage');\n\n    var country = getArgValue('--coverage') || getArgValue('-c');\n    var result  = browserslist.coverage(query(browsers), country);\n    var round   = Math.round(result * 100) / 100.0;\n\n    var end = 'globally';\n    if (country && country !== 'global') {\n        end = 'in the ' + country.toUpperCase();\n    }\n\n    process.stdout.write(\n        'These browsers account for ' + round + '% of all users ' + end + '\\n');\n\n} else if ( args.length === 1 && args[0][0] !== '-' ) {\n    query(args[0]).forEach(function (browser) {\n        process.stdout.write(browser + '\\n');\n    });\n\n} else if (isArg('--config') || isArg('-b')) {\n    var opts = {\n        config: getArgValue('--config') || getArgValue('-b')\n    };\n\n    if (isArg('--env') || isArg('-e')) {\n        opts.env = getArgValue('--env') || getArgValue('-e');\n    }\n\n    if (isArg('--stats') || isArg('-s')) {\n        opts.stats = getArgValue('--stats') || getArgValue('-s');\n    }\n\n    query(null, opts).forEach(function (browser) {\n        process.stdout.write(browser + '\\n');\n    });\n} else {\n    error('Unknown arguments. Use --help to pick right one.');\n}\n"}